// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_mmBPFA_RCPPEXPORTS_H_GEN_
#define RCPP_mmBPFA_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace mmBPFA {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("mmBPFA", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("mmBPFA", "_mmBPFA_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in mmBPFA");
            }
        }
    }

    inline double sample_IBP_a(const double ibp_b, const arma::mat& zeros, const double e = 1, const double f = 1) {
        typedef SEXP(*Ptr_sample_IBP_a)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_IBP_a p_sample_IBP_a = NULL;
        if (p_sample_IBP_a == NULL) {
            validateSignature("double(*sample_IBP_a)(const double,const arma::mat&,const double,const double)");
            p_sample_IBP_a = (Ptr_sample_IBP_a)R_GetCCallable("mmBPFA", "_mmBPFA_sample_IBP_a");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_IBP_a(Shield<SEXP>(Rcpp::wrap(ibp_b)), Shield<SEXP>(Rcpp::wrap(zeros)), Shield<SEXP>(Rcpp::wrap(e)), Shield<SEXP>(Rcpp::wrap(f)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double sample_IBP_b(const double ibp_a, const double ibp_b, const arma::mat& zeros) {
        typedef SEXP(*Ptr_sample_IBP_b)(SEXP,SEXP,SEXP);
        static Ptr_sample_IBP_b p_sample_IBP_b = NULL;
        if (p_sample_IBP_b == NULL) {
            validateSignature("double(*sample_IBP_b)(const double,const double,const arma::mat&)");
            p_sample_IBP_b = (Ptr_sample_IBP_b)R_GetCCallable("mmBPFA", "_mmBPFA_sample_IBP_b");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_IBP_b(Shield<SEXP>(Rcpp::wrap(ibp_a)), Shield<SEXP>(Rcpp::wrap(ibp_b)), Shield<SEXP>(Rcpp::wrap(zeros)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_mmBPFA_RCPPEXPORTS_H_GEN_
